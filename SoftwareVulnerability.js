import React, { useState } from 'react';
import './SoftwareVulnerability.css';

function SoftwareVulnerability() {
  const [scanTarget, setScanTarget] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [selectedSoftware, setSelectedSoftware] = useState('all');

  const handleScan = async () => {
    setIsScanning(true);
    try {
      const response = await fetch('http://localhost:8080/software-scan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ target: scanTarget }),
      });
      
      const data = await response.json();
      setVulnerabilities(data.vulnerabilities || []);
    } catch (error) {
      console.error('Scanning error:', error);
    } finally {
      setIsScanning(false);
    }
  };

  return (
    <div className="software-vulnerability-container">
      <div className="scan-header">
        <h1 className="scan-title">Software Vulnerability Scanner</h1>
        <p className="scan-description">
          Scan your software systems for known vulnerabilities, outdated packages, and security risks.
        </p>
      </div>

      <div className="scan-controls">
        <select 
          className="software-select"
          value={selectedSoftware}
          onChange={(e) => setSelectedSoftware(e.target.value)}
        >
          <option value="all">All Software</option>
          <option value="os">Operating System</option>
          <option value="web">Web Applications</option>
          <option value="database">Database Systems</option>
          <option value="custom">Custom Applications</option>
        </select>

        <input
          type="text"
          className="scan-input"
          placeholder="Enter target directory or application name"
          value={scanTarget}
          onChange={(e) => setScanTarget(e.target.value)}
        />
        
        <button
          className="scan-button"
          onClick={handleScan}
          disabled={isScanning || !scanTarget}
        >
          {isScanning ? 'Scanning...' : 'Start Scan'}
        </button>
      </div>

      {vulnerabilities.length > 0 && (
        <div className="results-section">
          <div className="results-header">
            <h2 className="results-title">Scan Results</h2>
            <button className="export-button">
              Export Report
            </button>
          </div>

          <div className="vulnerability-list">
            {vulnerabilities.map((vuln, index) => (
              <div key={index} className="vulnerability-item">
                <div className={`severity-badge ${vuln.severity}`}>
                  {vuln.severity}
                </div>
                <div className="vulnerability-details">
                  <h3 className="vulnerability-title">{vuln.title}</h3>
                  <p className="vulnerability-description">{vuln.description}</p>
                  <div className="vulnerability-meta">
                    <span>Affected Software: {vuln.software}</span>
                    <span>CVE ID: {vuln.cveId}</span>
                  </div>
                </div>
                <div className="vulnerability-actions">
                  <button className="action-button">View Details</button>
                  <button className="action-button fix">Fix Issue</button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

export default SoftwareVulnerability;